package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.26

import (
	"context"

	"github.com/vnnyx/article-service/graph/model"
)

// CreateAuthor is the resolver for the createAuthor field.
func (r *mutationResolver) CreateAuthor(ctx context.Context, input model.NewAuthor) (*model.Author, error) {
	return r.AuthorUC.CreateAuthor(ctx, &input)
}

// CreateArticle is the resolver for the createArticle field.
func (r *mutationResolver) CreateArticle(ctx context.Context, input model.NewArticle) (*model.Article, error) {
	return r.ArticleUC.CreateArticle(ctx, &input)
}

// UpdateAuthor is the resolver for the updateAuthor field.
func (r *mutationResolver) UpdateAuthor(ctx context.Context, input model.UpdateAuthor) (bool, error) {
	return r.AuthorUC.UpdateAuthor(ctx, &input)
}

// UpdatePassword is the resolver for the updatePassword field.
func (r *mutationResolver) UpdatePassword(ctx context.Context, input model.UpdatePassword) (bool, error) {
	return r.AuthorUC.UpdatePassword(ctx, &input)
}

// DeleteAuthor is the resolver for the deleteAuthor field.
func (r *mutationResolver) DeleteAuthor(ctx context.Context, input model.DeleteAuthor) (bool, error) {
	return r.AuthorUC.DeleteAuthor(ctx, input.ID)
}

// UpdateArticle is the resolver for the updateArticle field.
func (r *mutationResolver) UpdateArticle(ctx context.Context, input model.UpdateArticle) (bool, error) {
	return r.ArticleUC.UpdateArticle(ctx, &input)
}

// DeleteArticle is the resolver for the deleteArticle field.
func (r *mutationResolver) DeleteArticle(ctx context.Context, input model.DeleteArticle) (bool, error) {
	return r.ArticleUC.DeleteArticle(ctx, input.ID)
}

// Authors is the resolver for the authors field.
func (r *queryResolver) Authors(ctx context.Context) ([]*model.Author, error) {
	return r.AuthorUC.GetAllAuthor(ctx)
}

// ArticleByAuthorID is the resolver for the articleByAuthorID field.
func (r *queryResolver) ArticleByAuthorID(ctx context.Context, input model.GetArticleByAuthorID) (*model.Author, error) {
	return r.AuthorUC.GetAuthorByID(ctx, input.ID)
}

// ArticleByUsername is the resolver for the articleByUsername field.
func (r *queryResolver) ArticleByUsername(ctx context.Context, input model.GetArticleByUsername) ([]*model.Author, error) {
	return r.AuthorUC.GetAuthorByUsername(ctx, input.Username)
}

// ArticleByName is the resolver for the articleByName field.
func (r *queryResolver) ArticleByName(ctx context.Context, input model.GetArticleByName) ([]*model.Author, error) {
	return r.ArticleUC.GetArticleByName(ctx, input.Name)
}

// ArticleByID is the resolver for the articleByID field.
func (r *queryResolver) ArticleByID(ctx context.Context, input model.GetArticleByID) (*model.Author, error) {
	return r.ArticleUC.GetArticleByID(ctx, input.ID)
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
